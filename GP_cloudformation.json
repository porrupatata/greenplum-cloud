{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "OpenSource Greenplum on AWS with an existing VPC",
    "Outputs": {
        "AdminUserName": {
            "Value": {
                "Fn::FindInMap": [
                    "ReleaseMapping",
                    "Current",
                    "Admin"
                ]
            },
            "Description": "Used for ssh and database"
        },
        "MonitorUserName": {
            "Value": "gpmon",
            "Description": "Used for Command Center"
        },
        "MasterHost": {
            "Value": {
                "Fn::GetAtt": [
                    "MasterHostOutput",
                    "Data"
                ]
            },
            "Condition": "EnableWaitConditions",
            "Description": "Client connections"
        },
        "Port": {
            "Value": "5432",
            "Description": "Database listening port"
        },
        "Password": {
            "Value": {
                "Fn::GetAtt": [
                    "PasswordOutput",
                    "Data"
                ]
            },
            "Condition": "EnableWaitConditions",
            "Description": "For Admin and Monitor Users"
        },
        "phpPgAdminURL": {
            "Value": {
                "Fn::GetAtt": [
                    "phpPgAdminOutput",
                    "Data"
                ]
            },
            "Condition": "EnableWaitConditions",
            "Description": "phpPgAdmin URL"
        },
        "CommandCenterURL": {
            "Value": {
                "Fn::GetAtt": [
                    "GPCCOutput",
                    "Data"
                ]
            },
            "Condition": "EnableWaitConditions",
            "Description": "Command Center URL"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network"
                    },
                    "Parameters": [
                        "InternetAccess",
                        "VPC",
                        "PrivateSubnet",
                        "PublicSubnet"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Configuration"
                    },
                    "Parameters": [
                        "KeyPair",
                        "DiskEncrypted",
                        "DiskType"
                    ]
                },
                {
                    "Label": {
                        "default": "Greenplum Configuration"
                    },
                    "Parameters": [
                        "DatabaseVersion",
                        "DatabaseName"
                    ]
                },
                {
                    "Label": {
                        "default": "Master Instance"
                    },
                    "Parameters": [
                        "MasterInstanceType",
                        "MasterDiskSize"
                    ]
                },
                {
                    "Label": {
                        "default": "Segment Instances"
                    },
                    "Parameters": [
                        "SegmentInstanceType",
                        "SegmentDiskSize",
                        "SegmentInstanceCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Optional Installs"
                    },
                    "Parameters": [
                        "CommandCenter",
                        "MADlib",
                        "DataSciencePython",
                        "DataScienceR",
                        "PLR",
                        "PostGIS",
                        "PLContainer"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "InternetAccess": {
            "Type": "String",
            "Description": "True means a Public IP address will be created for the Master Instance with ports 22, 5432, 28080, and 28090 open to the Internet. False means the Master will not have a Public IP address created and a jump box will be needed to access the cluster.",
            "Default": "False",
            "AllowedValues": [
                "True",
                "False"
            ]
        },
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Choose an existing VPC with DNS support on."
        },
        "PrivateSubnet": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The Private Subnet must be 1) in the above VPC 2) configured with outbound Internet access 3) map IP Address on launch set on 4) ping, TCP, and UDP traffic allowed within the Private Subnet."
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public facing Subnet for Master Instance if Internet Access is desired. If Internet Access is not desired, use the Private Subnet value. Public Subnet must be 1) in the above VPC 2) map IP address on launch set on 3) configured with outbound Internet access."
       },
        "KeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Amazon EC2 Key Pair. A Key Pair refers to the public and private keys used to access your instances instead of a password.",
            "MinLength": "1"
        },
        "DiskEncrypted": {
            "Type": "String",
            "Description": "Encrypt the Cluster Data Disks.",
            "Default": "True",
            "AllowedValues": [
                "True",
                "False"
            ]
        },
	 "OpenSourceSecurityGroup":{
          "Type": "String",
          "Description": "Security group attached to provide access to OpenSource machines",
          "Default": "sg-xxxxx"
        },
	"OpenSourceFileServerGroup": {
          "Type": "String",
          "Description": "Security group attached to provide access to reporting file server group",
          "Default": "sg-xxxxx"
        },

        "DiskType": {
            "Type": "String",
            "Description": "Disk Type for data volumes. SC1 is recommended for most use cases as it can reach the maximum disk throughput possible from the Segment instances but with slightly slower loading speed. ST1 is recommended for continuous data loading/querying or when the highest disk loading performance possible is needed.",
            "Default": "st1",
            "AllowedValues": [
                "sc1",
                "st1"
            ]
        },
        "DatabaseVersion": {
            "Type": "String",
            "Description": "Pick the major database version you would like to deploy.",
            "Default": "GP5",
            "AllowedValues": [
                "GP5",
                "GP6"
            ]
        },

	"DataPartitionCount":{
            "Type": "Number",
            "Description": "The number of data partions per node",
            "Default": "2",
            "AllowedValues": [
                1,
                2,
		3
            ]
	
	},
	
	"SegmentCountPerHost":{
            "Type": "Number",
            "Description": "The number of primary segments per node",
            "Default": "8",
            "AllowedValues": [
                2,
                4,
		4,
		6,
		8,
		9,
		10
            ]
	
	},


        "GPLicense": {
          "Type": "String",
          "Description": "Select Greenplum license to use.",
          "Default": "OpenSource",
          "AllowedValues": [
              "OpenSource",
              "OpenSource"
          ]
      },
      "UploadFolder": {
          "Type": "String",
          "Description": "Upload folder where from files will be uploaded to overwrite the ones on the AMI",
          "Default": "/xxxxxx/upload_to_cloud"
      },

        "DatabaseName": {
            "Type": "String",
            "Description": "The name of the default database in the Greenplum cluster.  Optional components will be installed in this database.",
            "Default": "dev",
            "MinLength": "3",
            "MaxLength": "63",
            "AllowedPattern": "^[a-z]([a-z0-9])*?$",
            "ConstraintDescription": "Must be at least 3 characters long, lower case, start with a letter, and contain only letters and numbers."
        },
        "MasterInstanceType": {
            "Type": "String",
            "Description": "The Master Instance Type. r5.xlarge is recommeneded for clustered deployments.",
            "Default": "r5.xlarge",
            "AllowedValues": [
                "r5.xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type"
        },
        "MasterDiskSize": {
            "Type": "Number",
            "Description": "Size in GB for each Data Disk on the Master. For clustered deployments, the Master will only have a single Data Disk.",
            "Default": 500,
            "AllowedValues": [
                500,
                1000,
                2000,
                3000,
                4000,
                5000,
                6000,
                7000,
                8000,
                9000,
                10000,
                11000,
                12000,
                12500,
                13000,
                14000,
                15000,
                16000
            ]
        },
        "SegmentInstanceType": {
            "Type": "String",
            "Description": "The Segment Instances will use this Instance Type. r5.2xlarge is recommended for low concurrency needs, r5.4xlarge is recommended for low to moderate concurrency needs, and r5.8xlarge is recommended for high-concurrency needs. Note: This parameter is ignored for Single-Instance deployments.",
            "Default": "r5.4xlarge",
            "AllowedValues": [
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type"
        },
        "SegmentDiskSize": {
            "Type": "Number",
            "Description": "Size in GB for each of the three EBS Data Disks on the Segment Instances. Minimum size set to 2000 because of the significant performance hit for smaller sized disks. Note: This parameter is ignored for Single-Instance deployments.",
            "Default": 2000,
            "AllowedValues": [
                1750,
                2000,
                3000,
                4000,
                5000,
                6000,
                7000,
                8000,
                9000,
                10000,
                11000,
                12000,
                12500,
                13000,
                14000,
                15000,
                16000
            ]
        },
        "SegmentInstanceCount": {
            "Type": "Number",
            "Description": "Number of dedicated Segment Instances in the OpenSource Greenplum Database cluster. Pick 0 for Single-Instance deployments.",
            "Default": 0,
            "AllowedValues": [
                0,
                2,
                4,
                6,
                8,
                10,
                12,
                14,
                16,
                18,
                20,
                22,
                24,
                26,
                28,
                30,
                32,
                34,
                36,
                38,
                40,
                42,
                44,
                46,
                48,
                50,
                52,
                54,
                56,
                58,
                60,
                62,
                64
            ]
        },
        "CommandCenter": {
            "Type": "String",
            "Description": "Optional Installation of OpenSource Greenplum Command Center.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "MADlib": {
            "Type": "String",
            "Description": "Optional Installation of MADlib.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "DataSciencePython": {
            "Type": "String",
            "Description": "Optional Installation of Data Science Python.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "DataScienceR": {
            "Type": "String",
            "Description": "Optional Installation of Data Science R.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "PLR": {
            "Type": "String",
            "Description": "Optional Installation of PL/R.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "PostGIS": {
            "Type": "String",
            "Description": "Optional Installation of PostGIS.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        },
        "PLContainer": {
            "Type": "String",
            "Description": "Optional Installation of PL/Container. It is recommended to use gpoptional to install PL/Container. Refer to the Release Notes for more information.",
            "Default": "Skip",
            "AllowedValues": [
                "Skip",
                "Install"
            ]
        }
    },
    "Mappings": {
        "AMIMapping": {
            "eu-west-1": {
                "64": "ami-0e7d829fcdb5b56eb",
                "TimeZone": "Europe/Dublin"
            },
            "gp6-10-light": {
                "64": "ami-0e7d829fcdb5b56eb",
                "TimeZone": "Europe/Dublin"
            },
            "gp6-10-patched-new-cloud-scripts-fileserver": {
                "64": "ami-0d7f45026fec14826",
                "TimeZone": "Europe/Dublin"
            }
        },
        "InstanceTypeMapping": {
            "r5.xlarge": {
                "SegmentRaidGroups": "3",
                "SegsPerHost": "3"
            },
            "r5.2xlarge": {
                "SegmentRaidGroups": "3",
                "SegsPerHost": "6"
            },
            "r5.4xlarge": {
                "SegmentRaidGroups": "3",
                "SegsPerHost": "6"
            },
            "r5.8xlarge": {
                "SegmentRaidGroups": "3",
                "SegsPerHost": "6"
            }
        },
        "ClusterCountMapping": {
            "0": {
                "ClusterCount": "1",
                "CreationTimeout": "PT20M",
                "Timeout": "1500"
            },
            "2": {
                "ClusterCount": "3",
                "CreationTimeout": "PT20M",
                "Timeout": "1500"
            },
            "4": {
                "ClusterCount": "5",
                "CreationTimeout": "PT25M",
                "Timeout": "1800"
            },
            "6": {
                "ClusterCount": "7",
                "CreationTimeout": "PT30M",
                "Timeout": "2100"
            },
            "8": {
                "ClusterCount": "9",
                "CreationTimeout": "PT30M",
                "Timeout": "2100"
            },
            "10": {
                "ClusterCount": "11",
                "CreationTimeout": "PT45M",
                "Timeout": "3000"
            },
            "12": {
                "ClusterCount": "13",
                "CreationTimeout": "PT45M",
                "Timeout": "3000"
            },
            "14": {
                "ClusterCount": "15",
                "CreationTimeout": "PT45M",
                "Timeout": "3000"
            },
            "16": {
                "ClusterCount": "17",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "18": {
                "ClusterCount": "19",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "20": {
                "ClusterCount": "21",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "22": {
                "ClusterCount": "23",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "24": {
                "ClusterCount": "25",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "26": {
                "ClusterCount": "27",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "28": {
                "ClusterCount": "29",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "30": {
                "ClusterCount": "31",
                "CreationTimeout": "PT60M",
                "Timeout": "3900"
            },
            "32": {
                "ClusterCount": "33",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "34": {
                "ClusterCount": "35",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "36": {
                "ClusterCount": "37",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "38": {
                "ClusterCount": "39",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "40": {
                "ClusterCount": "41",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "42": {
                "ClusterCount": "43",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "44": {
                "ClusterCount": "45",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "46": {
                "ClusterCount": "47",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "48": {
                "ClusterCount": "49",
                "CreationTimeout": "PT90M",
                "Timeout": "5700"
            },
            "50": {
                "ClusterCount": "51",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "52": {
                "ClusterCount": "53",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "54": {
                "ClusterCount": "55",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "56": {
                "ClusterCount": "57",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "58": {
                "ClusterCount": "59",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "60": {
                "ClusterCount": "61",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "62": {
                "ClusterCount": "63",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            },
            "64": {
                "ClusterCount": "65",
                "CreationTimeout": "PT120M",
                "Timeout": "7500"
            }
        },
        "ReleaseMapping": {
            "Current": {
                "Admin": "gpadmin",
                "ReleaseURL": "https://s3.amazonaws.com/opensource-greenplum-release",
                "Bucket": "s3://opensource-greenplum"
            }
        }
    },
    "Conditions": {
        "PublicIP": {
            "Fn::Equals": [
                {
                    "Ref": "InternetAccess"
                },
                "True"
            ]
        },
        "MultiInstances": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "0"
                    ]
                }
            ]
        },
	"DataPartition3": {
            "Fn::Equals": [
                        {
                            "Ref": "DataPartitionCount"
			},
			"3"
	    ]
	},
        
	"DataPartition2": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "DataPartitionCount"
                        },
                        "1"
                    ]
                }
            ]
	},
	
        "EnableWaitConditions": {
            "Fn::Equals": [
                "1",
                "1"
            ]
        },
        "DynamicScripts": {
            "Fn::Equals": [
                "1",
                "0"
            ]
        },
        "RunScripts": {
            "Fn::Equals": [
                "1",
                "1"
            ]
        },
        "RaiseError": {
            "Fn::Equals": [
                "1",
                "1"
            ]
        }
    },
    "Resources": {
        "MasterHostHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "PasswordHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "GPCCHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "phpPgAdminHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "MasterHostOutput": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "EnableWaitConditions",
            "DependsOn": "MasterInstance",
            "Properties": {
                "Handle": {
                    "Ref": "MasterHostHandle"
                },
                "Timeout": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "Timeout"
                    ]
                },
                "Count": 1
            }
        },
        "PasswordOutput": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "EnableWaitConditions",
            "DependsOn": "MasterInstance",
            "Properties": {
                "Handle": {
                    "Ref": "PasswordHandle"
                },
                "Timeout": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "Timeout"
                    ]
                },
                "Count": 1
            }
        },
        "GPCCOutput": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "EnableWaitConditions",
            "DependsOn": "MasterInstance",
            "Properties": {
                "Handle": {
                    "Ref": "GPCCHandle"
                },
                "Timeout": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "Timeout"
                    ]
                },
                "Count": 1
            }
        },
        "phpPgAdminOutput": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "EnableWaitConditions",
            "DependsOn": "MasterInstance",
            "Properties": {
                "Handle": {
                    "Ref": "phpPgAdminHandle"
                },
                "Timeout": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "Timeout"
                    ]
                },
                "Count": 1
            }
        },
        "InstanceIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DescribeRegions",
                                        "ec2:DescribeTags",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeInstanceStatus",
                                        "ec2:StopInstances",
                                        "ec2:StartInstances",
                                        "ec2:DetachVolume",
                                        "ec2:AttachVolume",
                                        "ec2:ModifyVolume",
                                        "ec2:DescribeVolumesModifications",
                                        "ec2:DescribeVolumeStatus",
                                        "ec2:DeleteVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:CreateSnapshot",
                                        "ec2:DeleteSnapshot",
                                        "ec2:DescribeSnapshots",
                                        "ec2:CopySnapshot",
                                        "ec2:CreateVolume",
                                        "s3:HeadBucket",
                                        "s3:ListAllMyBuckets",
                                        "s3:ListBucket",
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "ssm:GetParameter",
                                        "ssm:PutParameter",
                                        "ssm:DeleteParameter",
                                        "ssm:GetParametersByPath",
                                        "ec2:ModifyInstanceAttribute",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:ListStacks",
                                        "cloudformation:DescribeStackResources",
                                        "autoscaling:SuspendProcesses",
                                        "autoscaling:DescribeAutoScalingGroups",
                                        "autoscaling:ResumeProcesses",
                                        "ec2:DescribeLaunchTemplates",
                                        "ec2:DescribeLaunchTemplateVersions",
                                        "ec2:CreateLaunchTemplateVersion",
                                        "ec2:ModifyLaunchTemplate"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "DescribeAccessEC2andCFN"
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "InstanceIAMRole"
                    }
                ]
            }
        },
        "ClusterCompleteHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "ClusterCompleteCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "EnableWaitConditions",
            "DependsOn": "MasterInstance",
            "Properties": {
                "Handle": {
                    "Ref": "ClusterCompleteHandle"
                },
                "Timeout": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "Timeout"
                    ]
                },
                "Count": {
                    "Fn::FindInMap": [
                        "ClusterCountMapping",
                        {
                            "Ref": "SegmentInstanceCount"
                        },
                        "ClusterCount"
                    ]
                }
            }
        },
        "PrivateSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "PrivateSecurityGroup",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PrivateSecurityGroup"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PrivateSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "Description": "Outbound access",
                "GroupId": {
                    "Ref": "PrivateSecurityGroup"
                },
                "IpProtocol": "-1",
                "FromPort": -1,
                "ToPort": -1,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "PublicSecurityGroup",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "PublicSecurityGroup"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "PublicSecurityGroupEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "Description": "Outbound access",
                "GroupId": {
                    "Ref": "PublicSecurityGroup"
                },
                "IpProtocol": "-1",
                "FromPort": -1,
                "ToPort": -1,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PublicSecurityGroupSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "PublicIP",
            "Properties": {
                "Description": "SSH access",
                "GroupId": {
                    "Ref": "PublicSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PublicSecurityGroupDatabase": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "PublicIP",
            "Properties": {
                "Description": "Database access",
                "GroupId": {
                    "Ref": "PublicSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 5432,
                "ToPort": 5432,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PublicSecurityGroupGPCC": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "PublicIP",
            "Properties": {
                "Description": "Command Center access",
                "GroupId": {
                    "Ref": "PublicSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 28080,
                "ToPort": 28080,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PublicSecurityGroupAdmin": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "PublicIP",
            "Properties": {
                "Description": "phpPgAdmin access",
                "GroupId": {
                    "Ref": "PublicSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 28090,
                "ToPort": 28090,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "PrivateSecurityGroupPing": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "Ping access for the internal network.",
                "GroupId": {
                    "Ref": "PrivateSecurityGroup"
                },
                "IpProtocol": "icmp",
                "FromPort": 8,
                "ToPort": -1,
                "SourceSecurityGroupId": {
                    "Ref": "PrivateSecurityGroup"
                }
            }
        },
        "PrivateSecurityGroupTCP": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "TCP access for the internal network.",
                "GroupId": {
                    "Ref": "PrivateSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 0,
                "ToPort": 65535,
                "SourceSecurityGroupId": {
                    "Ref": "PrivateSecurityGroup"
                }
            }
        },
        "PrivateSecurityGroupUDP": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "Description": "UDP access for the internal network.",
                "GroupId": {
                    "Ref": "PrivateSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": 0,
                "ToPort": 65535,
                "SourceSecurityGroupId": {
                    "Ref": "PrivateSecurityGroup"
                }
            }
        },
        "MasterInstance": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Fn::If": [
                            "PublicIP",
                            {
                                "Ref": "PublicSubnet"
                            },
                            {
                                "Ref": "PrivateSubnet"
                            }
                        ]
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "MasterInstanceLaunchTemplate"
                    },
                    "Version": "1"
                },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1",
                "PlacementGroup": {
                    "Ref": "AWS::NoValue"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "mdw"
                                ]
                            ]
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": 1,
                    "Timeout": {
                        "Fn::FindInMap": [
                            "ClusterCountMapping",
                            {
                                "Ref": "SegmentInstanceCount"
                            },
                            "CreationTimeout"
                        ]
                    }
                }
            }
        },
        "MasterInstanceLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateData": {
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/sda1",
                            "Ebs": {
                                "VolumeSize": 32,
                                "DeleteOnTermination": true,
                                "VolumeType": "gp2"
                            }
                        },
                        {
                            "DeviceName": "/dev/sdb",
                            "Ebs": {
                                "VolumeSize": {
                                    "Ref": "MasterDiskSize"
                                },
                                "DeleteOnTermination": true,
                                "VolumeType": {
                                    "Ref": "DiskType"
                                },
                                "Encrypted": {
                                    "Ref": "DiskEncrypted"
                                }
                            }
                        },
                        {
                            "Fn::If": [
                                "MultiInstances",
                                {
                                    "DeviceName": "/dev/sdc",
                                    "NoDevice": "true"
                                },
				{
				"Fn::If": [
					"DataPartition2",
                	        	{
                        	    	"DeviceName": "/dev/sdc",
                            	    	"Ebs": {
                                		"VolumeSize": {
                                    			"Ref": "MasterDiskSize"
                                		},
                              		  	"DeleteOnTermination": true,
                             		   	"VolumeType": {
                                    			"Ref": "DiskType"
                                		},
                                		"Encrypted": {
                                    			"Ref": "DiskEncrypted"
                                		}
                            	     	}
                       		 	},
				 	{
						  "DeviceName": "/dev/sdc",
                                          	"NoDevice": "true"

				 	}
				    ]
				}
                            ]
                        },
                        {
                            "Fn::If": [
                                "MultiInstances",
                                {
                                    "DeviceName": "/dev/sdd",
                                    "NoDevice": "true"
                                },
				
				{
				"Fn::If": [
					"DataPartition3",
                	        	{
                        	    	"DeviceName": "/dev/sdd",
                            	    	"Ebs": {
                                		"VolumeSize": {
                                    			"Ref": "MasterDiskSize"
                                		},
                              		  	"DeleteOnTermination": true,
                             		   	"VolumeType": {
                                    			"Ref": "DiskType"
                                		},
                                		"Encrypted": {
                                    			"Ref": "DiskEncrypted"
                                		}
                            	     	}
                       		 	},
				 	{
						  "DeviceName": "/dev/sdd",
                                          	"NoDevice": "true"

				 	}
				    ]
				}
                            ]
                        },
                        {
                            "DeviceName": "/dev/sdz",
                            "Ebs": {
                                "VolumeSize": 32,
                                "DeleteOnTermination": true,
                                "VolumeType": "gp2",
                                "Encrypted": {
                                    "Ref": "DiskEncrypted"
                                }
                            }
                        }
                    ],
                    "EbsOptimized": true,
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/${InstanceProfile}"
                        }
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AMIMapping",
                            {
                                "Ref": "AWS::Region"
                            },
                            "64"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "MasterInstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyPair"
                    },
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": {
                                "Fn::If": [
                                    "PublicIP",
                                    true,
                                    false
                                ]
                            },
                            "Groups": [
                                {
                                    "Ref": "PublicSecurityGroup"
                                },
                                {
                                    "Ref": "PrivateSecurityGroup"
                                },
                                {
                                    "Ref": "OpenSourceSecurityGroup"
                                }
                            ],
                            "SubnetId": {
                                "Fn::If": [
                                    "PublicIP",
                                    {
                                        "Ref": "PublicSubnet"
                                    },
                                    {
                                        "Ref": "PrivateSubnet"
                                    }
                                ]
                            }
                        }
                    ],
                    "Placement": {
                        "Tenancy": "default"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash\n",
                                    "PATH+=\":/usr/local/bin\"\n",
                                    "export PATH\n",
                                    "echo 'STACK=\"",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_HOST_IND=\"1\"' >> /opt/opensource/greenplum/variables.sh\n",
				    "echo 'MAX_EXPECTED_CONCURRENT_QUERIES=\"10\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'VOLUME_TYPE=\"",
                                    {
                                        "Ref": "DiskType"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'TIMEZONE=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "AMIMapping",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "TimeZone"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_NAME=\"",
                                    {
                                        "Ref": "DatabaseName"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_VERSION=\"",
                                    {
                                        "Ref": "DatabaseVersion"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_LICENSE=\"",
                                    {
                                        "Ref": "GPLicense"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'UPLOAD_FOLDER=\"",
                                    {
                                        "Ref": "UploadFolder"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'RELEASE_URL=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "ReleaseURL"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'ADMIN=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "Admin"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'BUCKET=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "Bucket"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SIGNAL_URL=\"",
                                    {
                                        "Ref": "ClusterCompleteHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_HOST_SIGNAL=\"",
                                    {
                                        "Ref": "MasterHostHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'PASSWORD_SIGNAL=\"",
                                    {
                                        "Ref": "PasswordHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'GPCC_SIGNAL=\"",
                                    {
                                        "Ref": "GPCCHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'PHPPGADMIN_SIGNAL=\"",
                                    {
                                        "Ref": "phpPgAdminHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTANCE_COUNT=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ClusterCountMapping",
                                            {
                                                "Ref": "SegmentInstanceCount"
                                            },
                                            "ClusterCount"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_RAID_GROUPS=\"",
                                    {
                                        "Ref": "DataPartitionCount"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SEGMENT_RAID_GROUPS=\"",
                                    {
                                        "Ref": "DataPartitionCount"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_SEGMENTS_PER_HOST=\"",
                                    {
                                        "Ref": "SegmentCountPerHost"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SEGMENT_SEGMENTS_PER_HOST=\"",
                                    {
                                        "Ref": "SegmentCountPerHost"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    {
                                        "Fn::If": [
                                            "DynamicScripts",
                                            "echo 'DYNAMIC_SCRIPTS=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'DYNAMIC_SCRIPTS=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "RunScripts",
                                            "echo 'RUN_SCRIPTS=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'RUN_SCRIPTS=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "RaiseError",
                                            "echo 'RAISE_ERROR=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'RAISE_ERROR=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    "echo 'INSTALL_PHPPGADMIN=\"Install\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_GPCC=\"",
                                    {
                                        "Ref": "CommandCenter"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_MADLIB=\"",
                                    {
                                        "Ref": "MADlib"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_PLR=\"",
                                    {
                                        "Ref": "PLR"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_DSPYTHON=\"",
                                    {
                                        "Ref": "DataSciencePython"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_DSR=\"",
                                    {
                                        "Ref": "DataScienceR"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_POSTGIS=\"",
                                    {
                                        "Ref": "PostGIS"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_PLCONTAINER=\"",
                                    {
                                        "Ref": "PLContainer"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "/opt/opensource/greenplum/rollout.sh &> /opt/opensource/greenplum/rollout.log\n"
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "SegmentInstances": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Condition": "MultiInstances",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "SegmentInstancesLaunchTemplate"
                    },
                    "Version": "1"
                },
                "MinSize": {
                    "Ref": "SegmentInstanceCount"
                },
                "MaxSize": {
                    "Ref": "SegmentInstanceCount"
                },
                "DesiredCapacity": {
                    "Ref": "SegmentInstanceCount"
                },
                "PlacementGroup": {
                    "Ref": "AWS::NoValue"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "SegmentInstanceCount"
                    },
                    "Timeout": {
                        "Fn::FindInMap": [
                            "ClusterCountMapping",
                            {
                                "Ref": "SegmentInstanceCount"
                            },
                            "CreationTimeout"
                        ]
                    }
                }
            }
        },
        "SegmentInstancesLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Condition": "MultiInstances",
            "Properties": {
                "LaunchTemplateData": {
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/sda1",
                            "Ebs": {
                                "VolumeSize": 32,
                                "DeleteOnTermination": true,
                                "VolumeType": "gp2"
                            }
                        },
                        {
                            "DeviceName": "/dev/sdb",
                            "Ebs": {
                                "VolumeSize": {
                                    "Ref": "SegmentDiskSize"
                                },
                                "DeleteOnTermination": true,
                                "VolumeType": {
                                    "Ref": "DiskType"
                                },
                                "Encrypted": {
                                    "Ref": "DiskEncrypted"
                                }
                            }
                        },
			{
			"Fn::If": [
				"DataPartition2",
                	        {
                        	    "DeviceName": "/dev/sdc",
                            	    "Ebs": {
                                	"VolumeSize": {
                                    		"Ref": "SegmentDiskSize"
                                	},
                              		  "DeleteOnTermination": true,
                             		   "VolumeType": {
                                    		"Ref": "DiskType"
                                	},
                                	"Encrypted": {
                                    		"Ref": "DiskEncrypted"
                                	}
                            	     }
                       		 },
				 {
					  "DeviceName": "/dev/sdc",
                                          "NoDevice": "true"

				 }
			    ]
			},
			{
			"Fn::If": [
				"DataPartition3",
                	        {
                        	    "DeviceName": "/dev/sdd",
                            	    "Ebs": {
                                	"VolumeSize": {
                                    		"Ref": "SegmentDiskSize"
                                	},
                              		  "DeleteOnTermination": true,
                             		   "VolumeType": {
                                    		"Ref": "DiskType"
                                	},
                                	"Encrypted": {
                                    		"Ref": "DiskEncrypted"
                                	}
                            	     }
                       		 },
				 {
					  "DeviceName": "/dev/sdd",
                                          "NoDevice": "true"

				 }
			    ]
			},
                        {
                            "DeviceName": "/dev/sdz",
                            "Ebs": {
                                "VolumeSize": 32,
                                "DeleteOnTermination": true,
                                "VolumeType": "gp2",
                                "Encrypted": {
                                    "Ref": "DiskEncrypted"
                                }
                            }
                        }
                    ],
                    "EbsOptimized": true,
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/${InstanceProfile}"
                        }
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AMIMapping",
                            {
                                "Ref": "AWS::Region"
                            },
                            "64"
                        ]
                    },
                    "InstanceType": {
                        "Ref": "SegmentInstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyPair"
                    },
                    "NetworkInterfaces": [
                        {
                            "DeviceIndex": 0,
                            "AssociatePublicIpAddress": false,
                            "Groups": [
                                {
                                    "Ref": "PublicSecurityGroup"
                                },
                                {
                                    "Ref": "PrivateSecurityGroup"
                                },
                                {
                                    "Ref": "OpenSourceFileServerGroup"
                                }
				
                            ],
                            "SubnetId": {
                                "Fn::If": [
                                    "PublicIP",
                                    {
                                        "Ref": "PublicSubnet"
                                    },
                                    {
                                        "Ref": "PrivateSubnet"
                                    }
                                ]
                            }
                        }
                    ],
                    "Placement": {
                        "Tenancy": "default"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash\n",
                                    "PATH+=\":/usr/local/bin\"\n",
                                    "export PATH\n",
                                    "echo 'STACK=\"",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_HOST_IND=\"0\"' >> /opt/opensource/greenplum/variables.sh\n",
				    "echo 'MAX_EXPECTED_CONCURRENT_QUERIES=\"10\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'VOLUME_TYPE=\"",
                                    {
                                        "Ref": "DiskType"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'TIMEZONE=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "AMIMapping",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "TimeZone"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_NAME=\"",
                                    {
                                        "Ref": "DatabaseName"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_VERSION=\"",
                                    {
                                        "Ref": "DatabaseVersion"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'DATABASE_LICENSE=\"",
                                    {
                                        "Ref": "GPLicense"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'UPLOAD_FOLDER=\"",
                                    {
                                        "Ref": "UploadFolder"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'RELEASE_URL=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "ReleaseURL"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'ADMIN=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "Admin"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'BUCKET=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ReleaseMapping",
                                            "Current",
                                            "Bucket"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SIGNAL_URL=\"",
                                    {
                                        "Ref": "ClusterCompleteHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_HOST_SIGNAL=\"",
                                    {
                                        "Ref": "MasterHostHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'PASSWORD_SIGNAL=\"",
                                    {
                                        "Ref": "PasswordHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'GPCC_SIGNAL=\"",
                                    {
                                        "Ref": "GPCCHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'PHPPGADMIN_SIGNAL=\"",
                                    {
                                        "Ref": "phpPgAdminHandle"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTANCE_COUNT=\"",
                                    {
                                        "Fn::FindInMap": [
                                            "ClusterCountMapping",
                                            {
                                                "Ref": "SegmentInstanceCount"
                                            },
                                            "ClusterCount"
                                        ]
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_RAID_GROUPS=\"",
                                    {
                                        "Ref": "DataPartitionCount"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SEGMENT_RAID_GROUPS=\"",
                                    {
                                        "Ref": "DataPartitionCount"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'MASTER_SEGMENTS_PER_HOST=\"",
                                    {
                                        "Ref": "SegmentCountPerHost"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'SEGMENT_SEGMENTS_PER_HOST=\"",
                                    {
                                        "Ref": "SegmentCountPerHost"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    {
                                        "Fn::If": [
                                            "DynamicScripts",
                                            "echo 'DYNAMIC_SCRIPTS=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'DYNAMIC_SCRIPTS=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "RunScripts",
                                            "echo 'RUN_SCRIPTS=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'RUN_SCRIPTS=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "RaiseError",
                                            "echo 'RAISE_ERROR=\"Yes\"' >> /opt/opensource/greenplum/variables.sh\n",
                                            "echo 'RAISE_ERROR=\"No\"' >> /opt/opensource/greenplum/variables.sh\n"
                                        ]
                                    },
                                    "echo 'INSTALL_PHPPGADMIN=\"Install\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_GPCC=\"",
                                    {
                                        "Ref": "CommandCenter"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_MADLIB=\"",
                                    {
                                        "Ref": "MADlib"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_PLR=\"",
                                    {
                                        "Ref": "PLR"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_DSPYTHON=\"",
                                    {
                                        "Ref": "DataSciencePython"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_DSR=\"",
                                    {
                                        "Ref": "DataScienceR"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_POSTGIS=\"",
                                    {
                                        "Ref": "PostGIS"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "echo 'INSTALL_PLCONTAINER=\"",
                                    {
                                        "Ref": "PLContainer"
                                    },
                                    "\"' >> /opt/opensource/greenplum/variables.sh\n",
                                    "/opt/opensource/greenplum/rollout.sh &> /opt/opensource/greenplum/rollout.log\n"
                                ]
                            ]
                        }
                    }
                }
            }
        }
    }
}
